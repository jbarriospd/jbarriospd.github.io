<script is:inline>
	const colorScheme = window.matchMedia("(prefers-color-scheme: dark)")
		.matches
		? "dark"
		: "light";

	const lightModePref = window.matchMedia("(prefers-color-scheme: light)");

	// Get user preference from local storage or from browser preference
	function getUserPref() {
		const storedTheme = localStorage.getItem("theme") ?? undefined;
		return storedTheme || (lightModePref.matches ? "light" : "dark");
	}

	function setTheme(newTheme) {
		if (newTheme !== "light" && newTheme !== "dark") {
			return console.log(
				`Invalid theme value '${newTheme}' received. Expected 'light' or 'dark'.`,
			);
		}

		localStorage.setItem("theme", newTheme);

		const root = document.documentElement;

		// If current theme is already set, do nothing
		if (root.getAttribute("data-theme") === newTheme) {
			return;
		}

		root.setAttribute("data-theme", newTheme);

		// Remove both classes first
		root.classList.remove("scheme-light", "scheme-dark");
		// Add the corresponding class
		root.classList.add(
			newTheme === "dark" ? "scheme-dark" : "scheme-light",
		);
	}

	// Initial Setup
	setTheme(getUserPref());

	// View Transitions hook to restore theme
	document.addEventListener("astro:after-swap", () =>
		setTheme(getUserPref()),
	);

	// Listen for theme-change custom event
	document.addEventListener("theme-change", (e) => {
		setTheme(e.detail.theme);
	});

	// Listen for prefers-color-scheme change
	lightModePref.addEventListener("change", (e) =>
		setTheme(e.matches ? "light" : "dark"),
	);
</script>
